const synthetics = require('Synthetics');
const log = require('SyntheticsLogger');

exports.handler = async () => {
  log.info('Starting');
  const apiBaseUrl = new URL(process.env.API_BASE_URL);

  await deleteAllItems(apiBaseUrl);
  await createItem(apiBaseUrl, 1);
  await createItem(apiBaseUrl, 2);
  await createItem(apiBaseUrl, 3);

  const items = await getAllItems(apiBaseUrl);

  const firstItemId = items[0].itemId;
  await updateItem(apiBaseUrl, firstItemId);
  await getItem(apiBaseUrl, firstItemId);
  await deleteItem(apiBaseUrl, firstItemId);
}

async function createItem(apiBaseUrl, itemNumber) {
  await synthetics.executeHttpStep(
    `Create Item API endpoint #${itemNumber}`,
    {
      'hostname': apiBaseUrl.hostname,
      'method': 'POST',
      'path': `${apiBaseUrl.pathname}items`,
      'port': 443,
      'protocol': 'https:',
      'headers': {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        item: `Hello, World #{itemNumber}!`,
      }),
    }
  );
}

async function getAllItems(apiBaseUrl) {
  let returnValue;
  await synthetics.executeHttpStep(
    'Get All Items API endpoint',
    {
      'hostname': apiBaseUrl.hostname,
      'method': 'GET',
      'path': `${apiBaseUrl.pathname}items`,
      'port': 443,
      'protocol': 'https:',
    },
    res => getResponseBody(res, responseBody => returnValue = responseBody)
  )
  return returnValue;
}

async function getItem(apiBaseUrl, firstItemId) {
  let returnValue;
  await synthetics.executeHttpStep(
    'Get Item API endpoint',
    {
      'hostname': apiBaseUrl.hostname,
      'method': 'GET',
      'path': `${apiBaseUrl.pathname}items/${firstItemId}`,
      'port': 443,
      'protocol': 'https:',
    },
    res => getResponseBody(res, responseBody => returnValue = responseBody)
  )
  return returnValue;
}

async function updateItem(apiBaseUrl, itemId) {
  await synthetics.executeHttpStep(
    'Update Item API endpoint',
    {
      'hostname': apiBaseUrl.hostname,
      'method': 'PATCH',
      'path': `${apiBaseUrl.pathname}items/${itemId}`,
      'port': 443,
      'protocol': 'https:',
      'headers': {
        'Content-Type': 'application/json',
      },
      body: JSON.stringify({
        updated: true,
      })
    }
  )
}

async function deleteAllItems(apiBaseUrl) {
  await synthetics.executeHttpStep(
    'Delete All Items API endpoint',
    {
      'hostname': apiBaseUrl.hostname,
      'method': 'DELETE',
      'path': `${apiBaseUrl.pathname}items`,
      'port': 443,
      'protocol': 'https:',
    }
  )
}

async function deleteItem(apiBaseUrl, itemId) {
  await synthetics.executeHttpStep(
    'Get All Items API endpoint',
    {
      'hostname': apiBaseUrl.hostname,
      'method': 'DELETE',
      'path': `${apiBaseUrl.pathname}items/${itemId}`,
      'port': 443,
      'protocol': 'https:',
    }
  )
}

async function getResponseBody(res, responseBodyCallback) {
  return new Promise((resolve) => {
    if (res.statusCode !== 200) {
      throw res.statusCode + ' ' + res.statusMessage;
    }

    let responseBody = '';
    res.on('data', (d) => {
      responseBody += d;
    });

    res.on('end', () => {
        responseBodyCallback(JSON.parse(responseBody));
      resolve();
    });
  });
}
